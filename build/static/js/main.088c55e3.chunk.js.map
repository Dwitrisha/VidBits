{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","loop","current","pause","play","ref","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","videos","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.088c55e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./VideoFooter.css\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport Ticker from \"react-ticker\";\r\n\r\nfunction VideoFooter({ channel, description, song }) {\r\n  return (\r\n    <div className=\"videoFooter\">\r\n      <div className=\"videoFooter__text\">\r\n        <h3>@{channel}</h3>\r\n        <p>{description}</p>\r\n        <div className=\"videoFooter__ticker\">\r\n          <MusicNoteIcon className=\"videoFooter__icon\" />\r\n          <Ticker mode=\"smooth\">\r\n            {({ index }) => (\r\n              <>\r\n                <p>{song}</p>\r\n              </>\r\n            )}\r\n          </Ticker>\r\n        </div>\r\n      </div>\r\n      <img\r\n        className=\"videoFooter__record\"\r\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\r\n        alt=\"\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoFooter;","import React, { useState } from \"react\";\r\nimport \"./VideoSidebar.css\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport MessageIcon from \"@material-ui/icons/Message\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\n\r\nfunction VideoSidebar({ likes, shares, messages }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  return (\r\n    <div className=\"videoSidebar\">\r\n      <div className=\"videoSidebar__button\">\r\n        {liked ? (\r\n          <FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(false)} />\r\n        ) : (\r\n          <FavoriteBorderIcon\r\n            fontSize=\"large\"\r\n            onClick={(e) => setLiked(true)}\r\n          />\r\n        )}\r\n        <p>{liked ? likes + 1 : likes}</p>\r\n      </div>\r\n      <div className=\"videoSidebar__button\">\r\n        <MessageIcon fontSize=\"large\" />\r\n        <p>{messages}</p>\r\n      </div>\r\n      <div className=\"videoSidebar__button\">\r\n        <ShareIcon fontSize=\"large\" />\r\n        <p>{shares}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoSidebar;","import React, { useRef, useState } from \"react\";\r\nimport VideoFooter from \"./VideoFooter\";\r\nimport VideoSidebar from \"./VideoSidebar\";\r\nimport \"./Video.css\";\r\n\r\nfunction Video({ url, channel, description, song, likes, messages, shares }) {\r\n  const [playing, setPlaying] = useState(false);\r\n  const videoRef = useRef(null);\r\n\r\n  const onVideoPress = () => {\r\n    if (playing) {\r\n      videoRef.current.pause();\r\n      setPlaying(false);\r\n    } else {\r\n      videoRef.current.play();\r\n      setPlaying(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <video\r\n        className=\"video__player\"\r\n        loop\r\n        onClick={onVideoPress}\r\n        ref={videoRef}\r\n        src={url}\r\n      ></video>\r\n      <VideoFooter channel={channel} description={description} song={song} />\r\n      <VideoSidebar likes={likes} messages={messages} shares={shares} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Video;","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCi_0v_1eEexKaTDvAUXF5QG6XhsvGnPnw\",\r\n    authDomain: \"vidbits-88d53.firebaseapp.com\",\r\n    projectId: \"vidbits-88d53\",\r\n    storageBucket: \"vidbits-88d53.appspot.com\",\r\n    messagingSenderId: \"783866251249\",\r\n    appId: \"1:783866251249:web:8ef2dfc4953a78118da650\",\r\n    measurementId: \"G-TJ8HXNTDB7\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport Video from \"./Video\";\nimport db from \"./firebase\";\nimport \"./App.css\";\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"videos\").onSnapshot((snapshot) =>\n      setVideos(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    // BEM\n    <div className=\"app\">\n      <img class=\"logo\" src=\"https://images.pexels.com/photos/7345980/pexels-photo-7345980.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500\"/>\n      <h1 className=\"title\"> by Dwitrisha</h1>\n      <h2>Get in touch at dwitrisha@gmail.com</h2>\n      <div className=\"app__videos\">\n        {videos.map(\n          ({ url, channel, description, song, likes, messages, shares }) => (\n            <Video\n              url={url}\n              channel={channel}\n              song={song}\n              likes={likes}\n              messages={messages}\n              description={description}\n              shares={shares}\n            />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}